import time

import Util
import Logic
import LogicPrep
############### start to set env ################
WORK_DIR = "D:/000_WORK/KimNahye/20200827/WORK_DIR/"
# WORK_DIR = os.getcwd() + "/"
PROJECT_NAME = WORK_DIR.split("/")[-2]
FASTQ = "FASTQ/200302_PCR switching_hi-seq/"
INPUT = "input/"
GUIDE_BARCODE_CSV = "190509_FINAL.CSV"
D0_Lib_10fg = [1, 4]
D4_Gen_10ng = [2, 3, 5, 6, 7, 8]
FASTQ_EXT = ".extendedFrags.fastq"

SCAFFOLD_SEQ = "GTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTT"
FRONT_SCAF = SCAFFOLD_SEQ[:5]
FRONT_SCAF_WIN = 2
FRONT_SCAF_POS = 50
REAR_SCAF_WIN = 10

############### end setting env #################


def main():
    util = Util.Utils()
    logic_prep = LogicPrep.LogicPreps()
    csv_list = util.read_csv_ignore_N_line(WORK_DIR + INPUT + GUIDE_BARCODE_CSV)
    guide_list = logic_prep.make_1_arr_list_to_list(2, csv_list)
    barcd_list = logic_prep.make_2_arr_list_to_list(6, 7, csv_list)
    trgt_list = logic_prep.make_1_arr_list_to_list(8, csv_list)
    d0_seq_wo_scaf_list = logic_prep.make_3_arr_list_to_list(3, 4, 5, csv_list)

    fastq_list = util.read_fastq_to_list(WORK_DIR + FASTQ + "1" + FASTQ_EXT)
    # for tmp_i in range(20):
    #     print(fastq_list[tmp_i])




def test():
    fastq_list = [
        "ACTATATATCTTGTGGAAAGGACGAAACACCGGAGCAAGAGTATTTCCCAGGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTGCAATTTTTTTGCATACTCACATCTACATAAAAGTGAGCAAGAGTATTTCCCAGTGACCAAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAATA"
        , "TATATATCTTGTGGAAAGGACGAAACACCGCTTCCCAGCACCCAGTGGCGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTACGGATGTTTGACTCTATCATCGTCAATACACGTCTTCCCAGCACCCAGTGGCTGGGGGAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAAT"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGACCTGAAAGGGTCTTGCCAGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTCGCAGAAGTTTGTCTCTATATACTACTTCAAAGACACCTGAAAGGGTCTTGCCACGGGCCAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAATA"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGTGTGCCCCACCCGTGCCTCGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTCCGGGAGATTAGATATCTGCACGTAATCTACCCCGTGTGCCCCACCCGTGCCTCTGGTTGAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGCCTTAA"
        , "TATATATCTTGTGGAAAGGACGAAACACCGCTTGGCTATAACCCCTGCTGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTGCGTATGTTTGCTAGATCAGTCTCTACGAGAGCCCGTAGCATAGCCTCTTTGGAGGCTTAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAA"
        , "TATATATCTTGTGGAAAGGACGAAACACCGCGTATTAATACTACTTACAGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTGCCAGGGTTTTGATGCACTCACTCACATAGAATAACGTATTAATACTACTTACATGTATTAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCGGCTTACTCGACTTAATA"
        , "CTATATATCTTGTGGAAAGGACGAAACACCGCGGTCGCAGGAGCAATTGCGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTGATAGATTTTGCTCAGATACATCAGCGATTGTGCCGGTCGCAGGAGCAATTGCTGCGTCAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACCTAATA"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGCTCATTCCTTTAATGGAGCGTTTCAGAGCTATGCTGGAAACAGCACAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTACGGAGGTTTTGGATCATACACTCTCACAGAAACCCTCATTCCCTTAATGGAGCAGGGCAAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAA"
        , "CTATATATCTTGTGGAAAGGACGAAACACCGGAATGAGCTGCCTCTGCTTGTTTCAGAGCTATGCTGGAAAAGCATACAATTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTGGTGCGTTTGGTCAGCATCACGTCTATCTGGGAGAGTGAGCTGCCTCTGCTTACAGTAAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAA"
        , "TATATATCTTGTGGAAAGGACGAAACACCGCAGAATGGACGATTTTCACGTTTCAGAGCTATGCTGGAAACAGCTAGCAAGTTGAAATAAGGCTAGTCCGAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTCCTGTTGTTTTGGTACTATCCCAGTCTACTAGGGGCAGAGTGGACGATTTTCACAGGCTTAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAATA"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGGCCTGTTCCTTTGGTTTGGGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTCCTCTATTTTGTAGCACATCACACGTCTATGTCCGCCTGTTCCTTGGGTTTGGTGGTCAAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAATA"
        , "CTATATATCTTGTGGAAAGGACGAAACACCGCTCCCACTCTTAGAGCCTCGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTGCCAGGTGTTTGCTATATATGTATGTATATCTCACCTCCCACTCTTAGAGCCTCTGCCAGAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAATA"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGATAAATAATTTTCTATTTGGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGCTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTAACTTTTGTTTGTCTCGTCACTGTCAGGCTAAATAATAAATAATTTTCTATTTGGGAGCAAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAA"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGTGGGGACGCAGAAGCGAGAGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAGAGTGGCACCGAGTCGGTGCTTTTTTTAGCTTTGTTTGAGCACTGCTATCTCCTACTTCTCTGGGGACGCAGAAGCGAGAAGCGGGAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAATA"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGGGAGAACTTTGGTAGTAAAGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTCTAACGGTTTTGCATCGTACTCACTCGGTCGTCAGGGAGAACTTTGGTAGCAAAGGGATAAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAAT"
        , "CACCGAGATCTACACTATAGCCTACACTCTTTCCCTACACGACGCTCTTCCGATCTTATATATCTTGTGGAAAGGACGAAACACCGGAGACGTTGACTATCGTCTCGCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAAAGATCGGAAGAGCACACGTCTGAACTCCAGTCACATTACTCGATCTCGTATGCCGT"
        , "CTATATATCTTGTGGAAAGGACGAAACACCGCCACGAAAATCCCAGGGGAGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTGAAGGCGGTTTGATCGTCATCCAGCACTCATTCAGCCACGAAAATCCCAGGGGATGGCTCAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAAT"
        , "ACTATATATCTTGTGGAAAGGACGAAACACCGTCAGCTTTTCTTCCTAAACGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTGTGTGTGTTTGCTCGTAGTCTACAGTCAGATTACTCAGCTTTTCTTCATCAACAGAAGAAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAA"
        , "CTATATATCTTGTGGAAAGGACGAAACACCGATTATCATATATCAAAATAGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTTACAGTCGTTTGATACTCTGCTGTCATCAGAACAAATTATCATATATCAAAATAGGTAGTAGCTTGGCGTAACTAGATCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAATA"
        , "TATATATCTTGTGGAAAGGACGAAACACCGGCATGCGTGACTGTCTTTTGTTTCAGAGCTATGCTGGAAACAGCATAGCAAGTTGAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCGGTGCTTTTTTCAGAATGCTTTGGTGATCTATAGCACTGTCAAAGTGCATGCGTGACTGTCTTTTAGGCTTAGCTTGGCGTAACTAGACCTCTACTCTACCACTTGTACTTCAGCGGTCAGCTTACTCGACTTAAT"
    ]

    util = Util.Utils()
    logic_prep = LogicPrep.LogicPreps()
    logic = Logic.Logics()

    csv_list = util.read_csv_ignore_N_line(WORK_DIR + INPUT + GUIDE_BARCODE_CSV)
    guide_list = logic_prep.make_1_arr_list_to_list(2, csv_list)
    barcd_list = logic_prep.make_2_arr_list_to_list(6, 7, csv_list)
    trgt_list = logic_prep.make_1_arr_list_to_list(8, csv_list)
    d0_seq_wo_scaf_list = logic_prep.make_3_arr_list_to_list(3, 4, 5, csv_list)

    for idx in range(len(fastq_list)):
        scaf_ngs_read = fastq_list[idx][FRONT_SCAF_POS - FRONT_SCAF_WIN: FRONT_SCAF_POS + len(SCAFFOLD_SEQ) + REAR_SCAF_WIN]
        ngs_read_needle, needle_result, ref_seq_needle, alignments_result = logic.get_pairwise2_localds_result(scaf_ngs_read, SCAFFOLD_SEQ)
        print("")
        print(ngs_read_needle)
        print(needle_result)
        print(ref_seq_needle)
        print("")




















if __name__ == '__main__':
    start_time = time.perf_counter()
    print("start [ " + PROJECT_NAME + " ]>>>>>>>>>>>>>>>>>>")
    test()
    print("::::::::::: %.2f seconds ::::::::::::::" % (time.perf_counter() - start_time))